// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using System.IO;

namespace SourceWriter
{
	/// <summary>
	/// Defines the controller for a syntax highlighting text editor window. Syntax highlighting is
	/// provided by a <see cref="AppKit.TextKit.Formatter.LanguageFormatter"/> attached to a
	/// <see cref="AppKit.TextKit.Formatter.SourceTextView"/>.
	/// </summary>
	public partial class EditorWindowController : NSWindowController
	{
		#region Computed Properties
		/// <summary>
		/// Gets the definition item.
		/// </summary>
		/// <value>The definition item.</value>
		public ManualToolbarItem DefinitionItem {
			get { return ToolbarDefinition; }
		}

		/// <summary>
		/// Gets the auto complete.
		/// </summary>
		/// <value>The auto complete.</value>
		public ManualToolbarItem AutoComplete {
			get { return ToolbarAutoComplete; }
		}

		/// <summary>
		/// Gets the indent.
		/// </summary>
		/// <value>The indent.</value>
		public ManualToolbarItem Indent {
			get { return ToolbarIndent; }
		}

		/// <summary>
		/// Gets the outdent.
		/// </summary>
		/// <value>The outdent.</value>
		public ManualToolbarItem Outdent {
			get { return ToolbarOutdent; }
		}

		/// <summary>
		/// Gets the print.
		/// </summary>
		/// <value>The print.</value>
		public ManualToolbarItem Print {
			get { return ToolbarPrint; }
		}

		/// <summary>
		/// Gets the content controller.
		/// </summary>
		/// <value>The content controller.</value>
		public ViewController ContentController {
			get { return Window.ContentViewController as ViewController; }
		}

		/// <summary>
		/// Gets or sets the print info.
		/// </summary>
		/// <value>The print info.</value>
		public NSPrintInfo PrintInfo { get; set; } = new NSPrintInfo();
		#endregion

		#region Constructors
		/// <summary>
		/// Initializes a new instance of the <see cref="SourceWriter.EditorWindowController"/> class.
		/// </summary>
		/// <param name="handle">Handle.</param>
		public EditorWindowController (IntPtr handle) : base (handle)
		{
		}
		#endregion

		#region Override Methods
		/// <summary>
		/// Called when the window is loaded from the Storyboard.
		/// </summary>
		public override void WindowDidLoad ()
		{
			base.WindowDidLoad ();

			// Initialize
			Window.Delegate = new EditorWidowDelegate(Window);
		}

		/// <summary>
		/// Prepares a given segue to be executed by initializing any needed information.
		/// </summary>
		/// <param name="segue">The segue that is about to be executed.</param>
		/// <param name="sender">The controller calling the segue.</param>
		public override void PrepareForSegue (NSStoryboardSegue segue, NSObject sender)
		{
			base.PrepareForSegue (segue, sender);

			// Take action based on the segue name
			switch (segue.Identifier) {
			case "DefinitionSegue":
				var dialog = segue.DestinationController as DefinitionViewController;
				dialog.Keyword = ContentController.Keyword;
				dialog.KeywordInfo = ContentController.KeywordInfo;
				dialog.Presentor = ContentController;
				break;
			}
		}
		#endregion

		#region Public Methods
		/// <summary>
		/// Saves the document being edited in the current window. If the document hasn't been saved
		/// before, it presents a Save File Dialog and allows to specify the name and location of 
		/// the file.
		/// </summary>
		public void SaveDocument() {
			
			// Already saved?
			if (Window.RepresentedUrl != null) {
				var path = Window.RepresentedUrl.Path;

				// Save changes to file
				File.WriteAllText (path, ContentController.Text);
				Window.DocumentEdited = false;
			} else {
				var dlg = new NSSavePanel ();
				dlg.Title = "Save Document";
				dlg.BeginSheet (Window, (rslt) => {
					// File selected?
					if (rslt == 1) {
						var path = dlg.Url.Path;
						File.WriteAllText (path, ContentController.Text);
						Window.DocumentEdited = false;
						ContentController.View.Window.SetTitleWithRepresentedFilename (Path.GetFileName(path));
						ContentController.View.Window.RepresentedUrl = dlg.Url;
						ContentController.FilePath = path;

						// Add document to the Open Recent menu
						NSDocumentController.SharedDocumentController.NoteNewRecentDocumentURL(dlg.Url);
					}
				});
			}
		}
		#endregion

		#region Actions
		/// <summary>
		/// Allows the user to specify where to save the document.
		/// </summary>
		/// <param name="sender">The controller calling the method.</param>
		[Action("saveDocumentAs:")]
		public void SaveDocumentAs (NSObject sender) {
			Window.RepresentedUrl = null;
			SaveDocument ();
		}

		/// <summary>
		/// Saves the document to its last location or allows the user to select a 
		/// location if it has never been saved before.
		/// </summary>
		/// <param name="sender">The controller calling the method.</param>
		[Action("saveDocument:")]
		public void SaveDocument (NSObject sender) {
			SaveDocument ();
		}

		/// <summary>
		/// Forces the entire document to be re-syntax highlighted.
		/// </summary>
		/// <param name="sender">The controller calling the method.</param>
		[Action("reformat:")]
		public void ReformatDocument (NSObject sender) {
			ContentController.ReformatText (false);
		}

		/// <summary>
		/// Reformats the document as C sharp.
		/// </summary>
		/// <param name="sender">The controller calling the method.</param>
		[Action("languageCSharp:")]
		public void ReformatDocumentAsCSharp (NSObject sender) {
			ContentController.SetLanguageToCSharp ();
		}

		/// <summary>
		/// Reformats the document as HTML.
		/// </summary>
		/// <param name="sender">The controller calling the method.</param>
		[Action("languageHTML:")]
		public void ReformatDocumentAsHTML (NSObject sender) {
			ContentController.SetLanguageToHTML ();
		}

		/// <summary>
		/// Reformats the document as MarkDown.
		/// </summary>
		/// <param name="sender">The controller calling the method.</param>
		[Action("languageMarkDown:")]
		public void ReformatDocumentAsMarkDown (NSObject sender) {
			ContentController.SetLanguageToMarkDown ();
		}

		/// <summary>
		/// Reformats the document as XML.
		/// </summary>
		/// <param name="sender">The controller calling the method.</param>
		[Action("languageXML:")]
		public void ReformatDocumentAsXML (NSObject sender) {
			ContentController.SetLanguageToXML ();
		}

		/// <summary>
		/// Displays the auto complete word list.
		/// </summary>
		/// <param name="sender">The controller calling the method.</param>
		[Action("autoComplete:")]
		public void StartAutoComplete (NSObject sender) {
			ContentController.Editor.Complete (this);
		}

		/// <summary>
		/// Indents the currently selected text.
		/// </summary>
		/// <param name="sender">The controller calling the method.</param>
		[Action("indentText:")]
		public void IndentText (NSObject sender) {
			ContentController.Editor.IndentText();
		}

		/// <summary>
		/// Outdents the currently selected text.
		/// </summary>
		/// <param name="sender">The controller calling the method.</param>
		[Action("outdentText:")]
		public void OutdentText (NSObject sender) {
			ContentController.Editor.OutdentText();
		}

		/// <summary>
		/// Defines the keyword that is currently selected in the editor
		/// </summary>
		/// <param name="sender">The controller calling the method.</param>
		[Action("defineKeyword:")]
		public void defineKeyword (NSObject sender) {

			// Display information about the selected keyword
			if (ContentController.KeywordInfo != null) {
				PerformSegue ("DefinitionSegue", this);
			}

		}

		/// <summary>
		/// Opens the Page Layout dialog and allows the user to configure the setting for the
		/// page.
		/// </summary>
		/// <param name="sender">The controller calling the method.</param>
		/// <remarks>http://stackoverflow.com/questions/7097219/cocoa-create-nstextview-add-an-nsstring-to-it-and-print</remarks>
		[Action("runPageLayout:")]
		public void RunPageLayout (NSObject sender) {

			// Define objects
			var dlg = new NSPageLayout ();

			// Display dialog
			dlg.BeginSheet(PrintInfo, Window, () => {
				// Handle layout change
			});

		}

		/// <summary>
		/// Prints the document currently being edited.
		/// </summary>
		/// <param name="sender">The controller calling the method.</param>
		[Action("print:")]
		public void PrintDocument (NSObject sender) {
			ContentController.PrintDocument (PrintInfo);
		}

		/// <summary>
		/// Validates a menu item that has this object as a Target to its Action. This allows for
		/// a menu item to be enabled/disabled without having to take manual control of the entire
		/// menu.
		/// </summary>
		/// <returns><c>true</c>, if menu item should be enabled, <c>false</c> otherwise.</returns>
		/// <param name="item">The <c>NSMenuItem</c> that is currently being tested to see if
		/// it should be enabled.</param>
		/// <remarks>
		/// This code will ONLY be called for Menu Items that have been bound to this Controller
		/// using the method defined here:
		/// https://developer.xamarin.com/guides/mac/user-interface/working-with-menus/#Working_with_Custom_Window_Actions
		/// 
		/// For all other instances, you'll need to use the method described here to enable/disable
		/// Menu Items:
		/// https://developer.xamarin.com/guides/mac/user-interface/working-with-menus/#Enabling_and_Disabling_Menus_and_Items
		/// </remarks>
		[Action("validateMenuItem:")]
		public bool ValidateMenuItem (NSMenuItem item) {
			// Do validation here
			// Console.WriteLine("Validating Item: {0}", item);
			return true;
		}
		#endregion
	}
}
