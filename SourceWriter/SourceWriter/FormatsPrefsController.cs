// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using AppKit.TextKit.Formatter;

namespace SourceWriter
{
	/// <summary>
	/// This controller handles the user preferences for language syntax highlighting.
	/// </summary>
	/// <remarks>This section uses Data Binding and Key-Value Coding to bind
	/// preference values to UI Controls on the Storyboard. For more information
	/// see: http://developer.xamarin.com/guides/mac/application_fundamentals/databinding/</remarks>
	public partial class FormatsPrefsController : NSViewController
	{
		#region Application Access
		/// <summary>
		/// A helper shortcut to the app delegate.
		/// </summary>
		/// <value>The app.</value>
		public static AppDelegate App {
			get { return (AppDelegate)NSApplication.SharedApplication.Delegate; }
		}
		#endregion

		#region Private Variables
		/// <summary>
		/// The current Language Descriptor being edited.
		/// </summary>
		private LanguageDescriptor _language = new CSharpDescriptor ();
		#endregion

		#region Computed Properties
		/// <summary>
		/// Gets or sets the Language Descriptor currently being edited.
		/// </summary>
		/// <value>The <see cref="AppKit.TextKit.Formatter.LanguageDescriptor"/> to edit.</value>
		/// <remarks>This property is configured for data binding the values to fields in the
		/// Storyboard UI design.</remarks>
		[Export("Language")]
		public LanguageDescriptor Language {
			get { return _language; }
			set {
				WillChangeValue ("Language");
				_language = value;
				DidChangeValue ("Language");
			}
		}
		#endregion

		#region Constructors
		/// <summary>
		/// Initializes a new instance of the <see cref="SourceWriter.FormatsPrefsController"/> class.
		/// </summary>
		/// <param name="handle">Handle.</param>
		public FormatsPrefsController (IntPtr handle) : base (handle)
		{
		}
		#endregion

		#region Actions
		/// <summary>
		/// Switches the language being edited to C#.
		/// </summary>
		/// <param name="sender">The <c>NSMenuItem</c> that initiated the switch.</param>
		partial void ShowCSharp (Foundation.NSObject sender) {

			// Switching to a new language?
			if (Language.LanguageIdentifier != "CSharp") {
				Language = new CSharpDescriptor();

				// Apply any changes to open windows
				App.UpdateWindowPreferences();
			}
		}

		/// <summary>
		/// Switches the language being edited to HTML.
		/// </summary>
		/// <param name="sender">The <c>NSMenuItem</c> that initiated the switch.</param>
		partial void ShowHTML (Foundation.NSObject sender) {

			// Switching to a new language?
			if (Language.LanguageIdentifier != "HTML") {
				Language = new HTMLDescriptor();

				// Apply any changes to open windows
				App.UpdateWindowPreferences();
			}
		}

		/// <summary>
		/// Switches the language being edited to MarkDown.
		/// </summary>
		/// <param name="sender">The <c>NSMenuItem</c> that initiated the switch.</param>
		partial void ShowMarkDown (Foundation.NSObject sender) {

			// Switching to a new language?
			if (Language.LanguageIdentifier != "MarkDown") {
				Language = new MarkDownDescriptor();

				// Apply any changes to open windows
				App.UpdateWindowPreferences();
			}
		}

		/// <summary>
		/// Switches the language being edited to XML.
		/// </summary>
		/// <param name="sender">The <c>NSMenuItem</c> that initiated the switch.</param>
		partial void ShowXML (Foundation.NSObject sender) {

			// Switching to a new language?
			if (Language.LanguageIdentifier != "XML") {
				Language = new XMLDescriptor();

				// Apply any changes to open windows
				App.UpdateWindowPreferences();
			}
		}

		/// <summary>
		/// Forces any current language formatting changes to be sent to all open
		/// windows.
		/// </summary>
		/// <param name="sender">The <c>NSMenuItem</c> that initiated the update.</param>
		partial void ApplyChanges (Foundation.NSObject sender) {

			// Apply any changes to open windows
			App.UpdateWindowPreferences();
		}
		#endregion
	}
}
